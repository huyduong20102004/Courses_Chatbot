from qdrant_client import QdrantClient
from qdrant_client.http import models as rest
from sentence_transformers import SentenceTransformer
from collections import OrderedDict
import unicodedata
import re
import uuid

# ‚úÖ Kh·ªüi t·∫°o model ch·ªâ 1 l·∫ßn
MODEL = SentenceTransformer("VoVanPhuc/sup-SimCSE-VietNamese-phobert-base")

# ‚úÖ Field mapping
field_aliases = {
    "th·ªùi l∆∞·ª£ng": "Th·ªùi l∆∞·ª£ng",
    "h·ªçc ph√≠": "H·ªçc ph√≠",
    "ng∆∞·ªùi gi·∫£ng d·∫°y": "Ng∆∞·ªùi gi·∫£ng d·∫°y",
    "n·ªôi dung": "N·ªôi dung",
    "m·ª•c ti√™u": "M·ª•c ti√™u",
    "l·ª£i √≠ch": "L·ª£i √≠ch, ·ª©ng d·ª•ng th·ª±c t·∫ø",
    "y√™u c·∫ßu": "Kh√≥a h·ªçc y√™u c·∫ßu",
    "c√¥ng c·ª•": "C√¥ng c·ª• AI s·ª≠ d·ª•ng",
    "t√™n kh√≥a h·ªçc": "T√™n kh√≥a h·ªçc"
}

# ‚úÖ Th·ª© t·ª± chu·∫©n ƒë·ªÉ hi·ªÉn th·ªã c√°c field
field_order = [
    "N·ªôi dung",
    "Th·ªùi l∆∞·ª£ng",
    "M·ª•c ti√™u",
    "L·ª£i √≠ch, ·ª©ng d·ª•ng th·ª±c t·∫ø",
    "C√¥ng c·ª• AI s·ª≠ d·ª•ng",
    "Kh√≥a h·ªçc y√™u c·∫ßu",
    "H·ªçc ph√≠",
    "Ng∆∞·ªùi gi·∫£ng d·∫°y",
]

# ‚úÖ Format l·∫°i ph·∫ßn n·ªôi dung
def format_noidung_field(text):
    lines = [line.strip(" -") for line in text.splitlines() if line.strip() and line.strip() != "-"]
    joined = " ".join(lines)
    parts = re.split(r'(Module\s+\d+[:Ôºö]?|Ph·∫ßn\s+\d+[:Ôºö])', joined, flags=re.IGNORECASE)
    if len(parts) > 1:
        return "\n".join(f"- {parts[i].strip()} {parts[i+1].strip()}" for i in range(1, len(parts), 2)).strip()
    return "\n".join(f"- {line}" for line in lines).strip()

# ‚úÖ Format l·∫°i c√°c field kh√°c
def format_field_value(field, value):
    value = value.strip()
    if field == "N·ªôi dung":
        return format_noidung_field(value)
    lines = [line.strip(" -") for line in value.splitlines() if line.strip()]
    return "\n".join(f"- {line}" for line in lines)

# ‚úÖ Chu·∫©n h√≥a text
def normalize(text):
    text = re.sub(r'[:Ôºö.,;!?‚Ä¶]', '', text)
    return re.sub(r'\s+', ' ', text.lower().strip())

# ‚úÖ T√°ch field v√† t√™n kho√° h·ªçc t·ª´ c√¢u h·ªèi
def extract_fields_and_titles(question, all_titles):
    lowered = question.lower()
    found_fields = list(OrderedDict.fromkeys(field_aliases[k] for k in field_aliases if k in lowered))
    normalized_title_map = {normalize(title): title for title in all_titles}

    if "kho√° h·ªçc" not in lowered and "khoa hoc" not in lowered:
        return found_fields, []

    raw_query = lowered.split("kho√° h·ªçc", 1)[-1] if "kho√° h·ªçc" in lowered else lowered.split("khoa hoc", 1)[-1]
    keywords = re.split(r',| v√† | hoƒÉÃ£c | or ', raw_query)
    keywords = [normalize(kw.strip()) for kw in keywords if kw.strip()]

    if not keywords:
        return found_fields, all_titles

    matched = []
    for norm_title, original_title in normalized_title_map.items():
        match_count = sum(kw in norm_title for kw in keywords)
        if match_count:
            matched.append((match_count, original_title))
    matched.sort(reverse=True)
    found_titles = [title for _, title in matched]

    return found_fields, list(OrderedDict.fromkeys(found_titles))

# ‚úÖ Ch√®n chunks v√†o Qdrant
def insert_chunks_into_qdrant(chunks, QDRANT_URL, QDRANT_API_KEY, collection_name="khoa-hoc"):
    client = QdrantClient(url=QDRANT_URL, api_key=QDRANT_API_KEY)

    client.recreate_collection(
        collection_name=collection_name,
        vectors_config=rest.VectorParams(size=768, distance=rest.Distance.COSINE)
    )

    points = []
    for chunk in chunks:
        vector = MODEL.encode(chunk["value"]).tolist()
        points.append(rest.PointStruct(
            id=str(uuid.uuid4()),
            vector=vector,
            payload={
                "ten_khoa_hoc": chunk["ten_khoa_hoc"],
                "field": chunk["field"],
                "value": chunk["value"]
            }
        ))
    client.upsert(collection_name=collection_name, points=points)

# ‚úÖ H√†m truy v·∫•n ch√≠nh
def query_qdrant(question, QDRANT_URL, QDRANT_API_KEY, collection_name="khoa-hoc", top_k=200):
    query_vector = MODEL.encode(question).tolist()
    client = QdrantClient(url=QDRANT_URL, api_key=QDRANT_API_KEY)

    # L·∫•y t·∫•t c·∫£ ti√™u ƒë·ªÅ kho√° h·ªçc
    all_points = client.scroll(collection_name=collection_name, with_payload=True, limit=1000)[0]
    all_titles = sorted(set(p.payload.get("ten_khoa_hoc") for p in all_points if "ten_khoa_hoc" in p.payload))
    target_fields, course_titles = extract_fields_and_titles(question, all_titles)

    # Semantic Search
    results = client.search(
        collection_name=collection_name,
        query_vector=query_vector,
        limit=top_k,
        with_payload=True
    )

    if not results:
        return "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p."

    course_map = OrderedDict()
    for point in results:
        payload = point.payload
        title = payload.get("ten_khoa_hoc")
        field = payload.get("field")
        value = payload.get("value", "")

        if not title or not field:
            continue
        if course_titles and title not in course_titles:
            continue
        if target_fields and field not in target_fields:
            continue

        if title not in course_map:
            course_map[title] = []
        course_map[title].append((field, value))

    if not course_map:
        return "‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi ti√™u ch√≠ truy v·∫•n."

    # ‚úÖ Hi·ªÉn th·ªã k·∫øt qu·∫£
    lines = []
    lines.append("üìå K·∫øt qu·∫£ Semantic Search:")
    lines.append(f"\nüß™ Field(s): {target_fields if target_fields else 'T·∫•t c·∫£ c√°c tr∆∞·ªùng th√¥ng tin'}")
    lines.append(f"üß™ Kh√≥a h·ªçc: {course_titles if course_titles else 'T·∫•t c·∫£ c√°c kho√° h·ªçc'}")

    for idx, (title, fields) in enumerate(course_map.items(), 1):
        lines.append(f"\n{idx}. Kh√≥a h·ªçc: {title}")
        sorted_fields = sorted(
            [f for f in fields if f[0] != "T√™n kh√≥a h·ªçc"],
            key=lambda x: field_order.index(x[0]) if x[0] in field_order else 999
        )
        for field, val in sorted_fields:
            formatted_val = format_field_value(field, val)
            lines.append(f"\nüîπ {field}:\n{formatted_val}")

    return "\n".join(lines)



















































